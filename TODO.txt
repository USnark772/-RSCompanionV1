TODO:
-   Comments everywhere
-   Logging everywhere
    -   Lots of error checking
    -   Debug everywhere
-   Threading (some issues with UI lag)
-   Resize main window to fit entire height of device output graph
At some point
-   Refactor so that all device logic (device manager messaging etc.) is in the device specific files
    Would we need to pass a reference to the device controller's respective function in?
-   Change output path to fixed and user can change it if desired but doesn't need to.
-   Fix time on charts and output files so that it matches the time shown in users computers.
-   Chart Y axes need to be set to default values VOG 0-12 seconds, DRT RT 0-2500ms, Clicks 0-3
-   GPS integration
-   Possibly use numpy for internal data storage.
-   Design good way to calculate mean of each data type
    -   Let user set the bounds of the mean
-   When scrolling, the graphs move in their canvases
-   Some unexplained issues with ui sizing (Has to do with screen scaling)
-   Add cpu resource monitor to code with possible color coding based on percentage. < 70% is green, 70% - 90% yellow, > 90% red.
-   Add audio support. Does the camera mic come in separately or with the audio?

In progress:
    Video:
    -   Device overlay is recorded with the video
    -   Device output will add a frame # for when that device output came in
    -   Figure out all the configuration ideas for cameras and put them in the tab.
    -   Figure out bug with turning camman on or off. (Seems to be an issue with usb cams) (Can't seem to reproduce)
    -   Figure out bug with toggling cameras off and then clicking create exp (Seems to freeze the app indefinitely)

Dealt with:
-   Think about how to manage licenses ( Is this software worth protecting or is it useless without our specific devices? )
    Using GPL 3.0 or later at this time.
-   Check for updates is not working. (Solution: Make sure repo is public)

Updater:
-   Automatically download latest version at users request
-   Automatically check for updates at startup if user selects that option

to get stack trace
-   from traceback import print_stack
    print_stack() where you want a stacktrace
to get exceptions
-   from traceback import print_exc
    print_exc(filename)

cam version we have:
c920

Info on dealing with video compression in opencv
https://www.pyimagesearch.com/2017/02/06/faster-video-file-fps-with-cv2-videocapture-and-opencv/